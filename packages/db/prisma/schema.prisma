generator client {
  provider        = "prisma-client-js"
  // clientExtensions causing error
  // previewFeatures = ["fieldReference", "postgresqlExtensions", "filteredRelationCount", "multiSchema", "clientExtensions"]
  previewFeatures = ["fieldReference", "postgresqlExtensions", "filteredRelationCount"]

  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "../../../docs/database"
//}

generator zod {
  provider      = "zod-prisma"
  output        = "../zod-schemas"
  imports       = "../zod-util"
  relationModel = "default"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  output                = "./dbml"
  outputName            = "inreach.dbml"
  projectName           = "InReach"
  projectDatabaseType   = "PostgreSQL"
  includeRelationFields = false
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
  // schemas    = ["user", "org", "system", "relation"]
}

/// NextAuth Account **DO NOT ALTER**
model Account {
  id                String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation("Account", fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]
  //@@schema("user")

  @@unique([provider, providerAccountId])
}

/// NextAuth Session **DO NOT ALTER**
model Session {
  // Do not change - NextAuth fields
  id           String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String /// @zod.custom(imports.cuid)

  //@@schema("user")
}

/// NextAuth Verification Token **DO NOT ALTER**
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  //@@schema("user")

  @@unique([identifier, token])
}

/// NextAuth User
model User {
  //
  // Do not change - NextAuth fields
  //
  id            String    @id @default(cuid()) /// @zod.custom(imports.cuid)
  name          String?
  email         String    @unique(sort: Asc)
  emailVerified DateTime?
  image         String?
  accounts      Account[] @relation("Account")
  sessions      Session[]
  //
  // Ok to change below - Start of custom fields
  //
  legacyId      String?   @unique /// old ID from MongoDB

  active             Boolean                  @default(true)
  permissions        UserPermission[]
  /// assets that certain permissible roles are attributed to (edit org, etc)
  orgPermission      OrganizationPermission[]
  locationPermission LocationPermission[]

  reviews          OrgReview[]
  // Current location - for LCR
  currentCity      String?
  currentGovDist   GovDist?    @relation(fields: [currentGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentGovDistId String? /// @zod.custom(imports.cuid)
  currentCountry   Country?    @relation(name: "currentCountry", fields: [currentCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentCountryId String? /// @zod.custom(imports.cuid)

  // Data for AWS Cognito migration
  //  migrated from old DB - once user is migrated to Cognito, legacy fields are cleared, migrateDate is set
  legacyHash  String?
  legacySalt  String?
  migrateDate DateTime?

  // for LCR accounts
  communities     UserCommunityLink[] /// used for LCR accounts ONLY
  userSOGIdentity UserSOGLink[] /// used for LCR accounts ONLY

  // Relationships
  savedLists          UserSavedList[]
  listsSharedWithUser ListSharedWith[]
  roles               AssignedRole[]

  userType   UserType @relation(fields: [userTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userTypeId String /// @zod.custom(imports.cuid)

  langPref   Language? @relation(fields: [langPrefId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  langPrefId String? /// @zod.custom(imports.cuid)

  source   Source? @relation(name: "userSource", fields: [sourceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sourceId String? /// @zod.custom(imports.cuid)

  mailReceived UserMail[] @relation("mailTo")
  mailSent     UserMail[] @relation("mailFrom")

  // For claimed organizations / organization staff
  associatedOrg   Organization? @relation(fields: [associatedOrgId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  associatedOrgId String? /// @zod.custom(imports.cuid)
  orgTitle        UserTitle?    @relation(fields: [orgTitleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgTitleId      String? /// @zod.custom(imports.cuid)
  orgEmail        OrgEmail?     @relation("associatedEmail")
  orgPhone        OrgPhone?     @relation("associatedPhone")

  FieldVisibility FieldVisibility[] /// For user profile page. All fields default to 'NONE'

  /// Recording changes made by user
  AuditLogEntry AuditLog[] @relation("Recorded User")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[] @relation("AuditLogEntry")

  //@@schema("user")
}

/// User Role - Contains array of granular permissions
///  Internal use
model UserRole {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique
  tag  String @unique

  permissions   RolePermission[]
  usersAssigned AssignedRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  //@@schema("system")
}

/// Permission Definition
model Permission {
  id          String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name        String  @unique
  description String?

  users UserPermission[]
  roles RolePermission[]

  orgs      OrganizationPermission[]
  locations LocationPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

/// User Info - account type (seeker, org, lawyer, etc.)
///  use shorthand descriptions - front-end displayable text is defined in Translations
model UserType {
  id    String @id @default(cuid()) /// @zod.custom(imports.cuid)
  type  String @unique
  users User[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User Info - professional title
///  this will be a searchable list
model UserTitle {
  id         String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  title      String     @unique
  email      OrgEmail[]
  orgUser    User[]
  searchable Boolean    @default(false)

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

model UserSurvey {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  birthYear     Int?    @db.SmallInt
  reasonForJoin String?

  communities  SurveyCommunity[]
  ethnicity    SurveyEthnicity[]
  identifiesAs SurveySOG[]

  countryOrigin   Country? @relation("origin", fields: [countryOriginId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryOriginId String? /// @zod.custom(imports.cuid)

  immigration   UserImmigration? @relation(fields: [immigrationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  immigrationId String? /// @zod.custom(imports.cuid)

  currentCity      String?
  currentGovDist   GovDist? @relation(fields: [currentGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentGovDistId String? /// @zod.custom(imports.cuid)
  currentCountry   Country? @relation(name: "currentLocation", fields: [currentCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentCountryId String? /// @zod.custom(imports.cuid)

  //@@schema("user")
}

/// User demographics - Ethnicity
model UserEthnicity {
  id        String            @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  ethnicity String            @unique
  surveys   SurveyEthnicity[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Immigration Status
model UserImmigration {
  id      String       @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  status  String       @unique
  surveys UserSurvey[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Sexual orientation / Identity
model UserSOGIdentity {
  id         String        @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  identifyAs String        @unique
  surveys    SurveySOG[]
  users      UserSOGLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User demographics - Community
model UserCommunity {
  id        String              @id @default(cuid()) /// @zod.custom(imports.cuid)
  ///  use shorthand descriptions - front-end displayable text is defined in Translations
  community String              @unique
  users     UserCommunityLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog    AuditLog[]
  userSurveys SurveyCommunity[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// User's list(s) of saved resources.
model UserSavedList {
  id            String                  @id @default(cuid()) /// @zod.custom(imports.cuid)
  name          String
  organizations SavedOrganization[]
  services      SavedService[]
  visibility    UserSavedListVisibility @default(PRIVATE)
  sharedWith    ListSharedWith[]
  sharedLinkKey String?                 @unique

  ownedBy   User   @relation(fields: [ownedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownedById String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]
  //@@schema("user")

  @@index([ownedById])
}

/// List visiblity
enum UserSavedListVisibility {
  PRIVATE
  SHARED_USER
  SHARED_LINK
  PUBLIC

  //@@schema("system")
}

model UserMail {
  id         String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  toUser     User     @relation("mailTo", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUserId   String /// @zod.custom(imports.cuid)
  toExternal String[] /// Array of email addresses
  read       Boolean  @default(false)
  subject    String
  body       String

  from       String?
  fromUser   User?   @relation("mailFrom", fields: [fromUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fromUserId String? /// @zod.custom(imports.cuid)

  replies      UserMail[] @relation("userMailReplies")
  responseTo   UserMail?  @relation("userMailReplies", fields: [responseToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  responseToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  //@@schema("user")
}

/// Main organization definition
model Organization {
  id         String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId   String? @unique /// old ID from MongoDB
  name       String
  slug       String  @unique /// @zod.regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/gm)
  legacySlug String?

  description   FreeText? @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?   @unique /// @zod.custom(imports.cuid)

  email          OrgEmail[]
  location       OrgLocation[]
  notes          InternalNote[]
  phone          OrgPhone[]
  photos         OrgPhoto[]
  services       OrgService[]
  orgSocialMedia OrgSocialMedia[]
  orgWebsite     OrgWebsite[]
  reviews        OrgReview[]
  serviceArea    ServiceArea[]
  hours          OrgHours[] // for schedules that need to be assigned to locations
  userLists      SavedOrganization[]

  attributes           OrganizationAttribute[]
  attributeSupplements OrganizationAttributeSupplement[]

  deleted      Boolean   @default(false)
  published    Boolean   @default(false)
  lastVerified DateTime?

  // Users associated with organization (staff)
  associatedUsers User[]
  allowedEditors  OrganizationPermission[]

  // Outside API connections
  outsideApi   OutsideAPI? @relation(fields: [outsideApiId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  outsideApiId String? /// @zod.custom(imports.cuid)

  source   Source @relation(fields: [sourceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sourceId String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([name(sort: Asc)])
}

/// Organization email contacts - can be general or location specific
model OrgEmail {
  id         String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId   String? @unique /// old ID from MongoDB
  legacyDesc String?
  firstName  String?
  lastName   String?
  primary    Boolean @default(false)
  email      String
  published  Boolean @default(true)
  deleted    Boolean @default(false)

  title   UserTitle? @relation(fields: [titleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  titleId String? /// @zod.custom(imports.cuid)

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId        String? /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedEmail", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId String? @unique /// @zod.custom(imports.cuid)

  // optional - attach email to a specific location/service
  orgLocation     OrgLocation?      @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId   String? /// @zod.custom(imports.cuid)
  orgService      OrgEmailService[]
  /// associated only with location/service and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean           @default(false)
  orgServiceOnly  Boolean           @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("org")

  @@index([lastName(sort: Asc), firstName])
  @@index([email])
}

/// Org phone numbers - can be general or location specific
model OrgPhone {
  id              String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId        String?  @unique /// old ID from MongoDB
  legacyDesc      String?
  number          String
  ext             String?
  primary         Boolean  @default(false)
  published       Boolean  @default(true)
  deleted         Boolean  @default(false)
  migrationReview Boolean?

  /// Country profiles have intl dial prefix
  country   Country @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  countryId String /// @zod.custom(imports.cuid)

  phoneType   PhoneType? @relation(fields: [phoneTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  phoneTypeId String? /// @zod.custom(imports.cuid)

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String? /// @zod.custom(imports.cuid)

  user   User?   @relation(name: "associatedPhone", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId String? @unique /// @zod.custom(imports.cuid)

  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean       @default(false)
  orgLocation     OrgLocation[]

  orgService OrgPhoneService[]

  phoneLang OrgPhoneLanguage[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("org")
}

/// Organization's social media links
model OrgSocialMedia {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId  String? @unique /// old ID from MongoDB
  username  String
  url       String
  deleted   Boolean @default(false)
  published Boolean @default(true)

  service   SocialMediaService @relation(fields: [serviceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  serviceId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId   String?
  /// associated only with location and not overall organization (for large orgs w/ multiple locations)
  orgLocationOnly Boolean      @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("org")
}

model OrgWebsite {
  id            String    @id @default(cuid()) /// @zod.custom(imports.cuid)
  url           String
  description   FreeText? @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?   @unique /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  orgLocation     OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId   String?
  orgLocationOnly Boolean      @default(false)

  language OrgWebsiteLanguage[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("org")
}

/// Org location information
model OrgLocation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId String? @unique /// old ID from MongoDB
  name     String?
  street1  String
  street2  String?
  city     String
  postCode String?
  primary  Boolean @default(true)

  govDist   GovDist? @relation(fields: [govDistId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  govDistId String? /// @zod.custom(imports.cuid)

  country   Country @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  countryId String /// @zod.custom(imports.cuid)

  longitude Decimal? @db.Decimal(7, 4)
  latitude  Decimal? @db.Decimal(7, 4)
  geoJSON   Json /// @zod.custom(imports.GeoJSONSchema)

  published Boolean    @default(true)
  deleted   Boolean    @default(false)
  hours     OrgHours[]

  attributes           LocationAttribute[]
  attributeSupplements LocationAttributeSupplement[]

  organization   Organization         @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId          String /// @zod.custom(imports.cuid)
  allowedEditors LocationPermission[]

  email       OrgEmail[] /// if location specific
  orgWebsite  OrgWebsite[] /// if location specific
  phone       OrgPhone[] /// if location specific
  photos      OrgPhoto[]
  services    OrgLocationService[]
  serviceArea ServiceArea[]
  socialMedia OrgSocialMedia[] /// if location specific

  // Outside API connections
  outsideApi    OutsideAPI? @relation(fields: [outsideApiId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  outsideApiId  String? /// @zod.custom(imports.cuid)
  apiLocationId String?

  reviews OrgReview[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([latitude, longitude])
  @@index([geoJSON(ops: JsonbPathOps)], type: Gin)
}

/// Organization photos
model OrgPhoto {
  id        String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  src       String
  height    Int?    @db.SmallInt
  width     Int?    @db.SmallInt
  published Boolean @default(false)
  deleted   Boolean @default(false)

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId        String? /// @zod.custom(imports.cuid)

  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("org")
}

/// Organization location/service hours
///  day is stored as integer [0-6], Sunday = 0
///  start/end times are stored as RFC 3339 Timestamp (without zone)
///  as local time. Any timezone offset will be handled by runtime logic
model OrgHours {
  id       String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Sun 0, Mon 1, Tue 2, Wed 3, Thu 3, Fri 4, Sat 6
  dayIndex Int      @default(0) @db.SmallInt
  start    DateTime @db.Time(0)
  end      DateTime @db.Time(0)
  closed   Boolean  @default(false)

  orgLocation OrgLocation? @relation(fields: [orgLocId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocId    String? /// @zod.custom(imports.cuid)

  orgService   OrgService? @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId String? /// @zod.custom(imports.cuid)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  auditLog       AuditLog[]
  internalNote   InternalNote[]
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?
  needAssignment Boolean        @default(false)
  needReview     Boolean        @default(false)
  legacyId       String?
  legacyName     String?
  legacyNote     String?
  legacyStart    String?
  legacyEnd      String?
  legacyTz       String?

  //@@schema("org")
}

model FreeText {
  id    String         @id @default(cuid()) /// @zod.custom(imports.cuid)
  tsKey TranslationKey @relation(fields: [key, ns], references: [key, ns], onDelete: Cascade, onUpdate: Cascade)
  key   String
  ns    String

  Organization        Organization?
  OrgWebsite          OrgWebsite?
  OrgService          OrgService?
  AttributeSupplement AttributeSupplement?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]
  //@@schema("org")

  @@unique([key, ns])
}

/// Organization's offered services - access instructions & details
///  associated with service tag
model OrgService {
  id         String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId   String? @unique /// old ID from MongoDB
  published  Boolean @default(false)
  deleted    Boolean @default(false)
  legacyName String?

  service     OrgServiceTag[]
  serviceArea ServiceArea[]

  hours     OrgHours[]
  orgReview OrgReview[]

  attributes           ServiceAttribute[]
  attributeSupplements ServiceAttributeSupplement[]

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String? /// @zod.custom(imports.cuid)

  orgLocation OrgLocationService[]
  orgPhone    OrgPhoneService[]
  orgEmail    OrgEmailService[]

  access ServiceAccess[]

  description   FreeText? @relation(fields: [descriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  descriptionId String?   @unique /// @zod.custom(imports.cuid)

  userLists    SavedService[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  /// Does this record need to be checked by staff after migration?
  checkMigration Boolean?
  //@@schema("org")

  @@index([organizationId(sort: Asc)])
}

model ServiceArea {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  national ServiceAreaCountry[]
  dist     ServiceAreaDist[]

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?       @unique /// @zod.custom(imports.cuid)
  orgLocation    OrgLocation?  @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId  String?       @unique /// @zod.custom(imports.cuid)
  orgService     OrgService?   @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId   String?       @unique /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]

  //@@schema("org")
}

model ServiceAccess {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)
  // the legacyIds are nowhere near unique
  // legacyId String? @unique /// old ID from MongoDB

  attributes  ServiceAccessAttribute[]
  supplements ServiceAccessAttributeSupplement[]

  service   OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String /// old ID from MongoDB

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("org")
}

/// User reviews/ratings of organization
model OrgReview {
  id         String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId   String? @unique /// old ID from MongoDB
  rating     Int?    @db.SmallInt
  reviewText String?
  visible    Boolean @default(true)
  deleted    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)

  // Optional: Review can be attached to a specific service.
  orgService   OrgService? @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId String? /// @zod.custom(imports.cuid)

  // Optional: Review can be attached to a specific service.
  orgLocation   OrgLocation? @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId String? /// @zod.custom(imports.cuid)

  // Store the language of the review text
  // Use session locale value or Google Translate lang detect API
  // Optional: do not store anything if 'comment' is null
  language       Language? @relation(fields: [langId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  langId         String? /// @zod.custom(imports.cuid)
  /// How confident is the API guess?
  langConfidence Float?

  /// From https://perspectiveapi.com/
  toxicity Float?

  // Snapshot local community reviwer geographical info
  //  review should keep original geo data if LCR user updates their location.
  // Optional - only applicable if user is LCR
  lcrCity      String?
  lcrGovDist   GovDist? @relation(fields: [lcrGovDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lcrGovDistId String? /// @zod.custom(imports.cuid)
  lcrCountry   Country? @relation(fields: [lcrCountryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lcrCountryId String? /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("org")

  @@index([organizationId(sort: Asc)])
  @@index([orgServiceId(sort: Asc)])
}

/// Additional Properties for Org/Service.
model AttributeCategory {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  tag     String  @unique
  name    String  @unique
  icon    String?
  /// Internal description
  intDesc String?
  active  Boolean @default(true)

  namespace TranslationNamespace @relation(fields: [ns], references: [name], onDelete: Restrict, onUpdate: Cascade)
  ns        String /// @zod.custom(imports.cuid)

  attribute AttributeToCategory[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

model Attribute {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  tag     String  @unique
  name    String  @unique
  icon    String?
  /// Internal description
  intDesc String?
  active  Boolean @default(true)

  category AttributeToCategory[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  // Defaults
  serviceCategoryDefaults ServiceCategoryDefaultAttribute[]
  serviceTagDefaults      ServiceTagDefaultAttribute[]

  attachedServices      ServiceAttribute[]
  attachedServiceAccess ServiceAccessAttribute[]
  attachedOrganiations  OrganizationAttribute[]
  attachedLocations     LocationAttribute[]

  orgSupplements           OrganizationAttributeSupplement[]
  locationSupplements      LocationAttributeSupplement[]
  serviceSupplements       ServiceAttributeSupplement[]
  serviceAccessSupplements ServiceAccessAttributeSupplement[]

  requireText     Boolean @default(false)
  requireLanguage Boolean @default(false)
  requireCountry  Boolean @default(false)
  requireBoolean  Boolean @default(false)
  requireData     Boolean @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

// model AttributeRecord {
//   id          String             @id @default(cuid()) /// @zod.custom(imports.cuid)
//   attribute   Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   attributeId String /// @zod.custom(imports.cuid)
//   category    AttributeCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
//   categoryId  String?

//   supplements AttributeSupplement[]

//   organization    Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   organizationId  String? /// @zod.custom(imports.cuid)
//   service         OrgService?    @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   serviceId       String? /// @zod.custom(imports.cuid)
//   serviceAccess   ServiceAccess? @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   serviceAccessId String? /// @zod.custom(imports.cuid)
//   location        OrgLocation?   @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   locationId      String? /// @zod.custom(imports.cuid)

//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   auditLog     AuditLog[]
//   internalNote InternalNote[]
// }

model AttributeSupplement {
  id     String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  active Boolean @default(true)

  orgSupplement           OrganizationAttributeSupplement[]
  locationSupplement      LocationAttributeSupplement[]
  serviceSupplement       ServiceAttributeSupplement[]
  serviceAccessSupplement ServiceAccessAttributeSupplement[]

  data    Json? /// @zod.custom(imports.AttributeSupplement)
  boolean Boolean?

  text   FreeText? @relation(fields: [textId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textId String?   @unique /// @zod.custom(imports.cuid)

  country   Country? @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String?

  language   Language? @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

model ServiceCategory {
  id                String                            @id @default(cuid()) /// @zod.custom(imports.cuid)
  category          String                            @unique
  active            Boolean                           @default(true)
  services          ServiceTag[]
  defaultAttributes ServiceCategoryDefaultAttribute[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

model ServiceTag {
  id                String                       @id @default(cuid()) /// @zod.custom(imports.cuid)
  name              String
  active            Boolean                      @default(true)
  defaultAttributes ServiceTagDefaultAttribute[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  category   ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId String /// @zod.custom(imports.cuid)

  /// Tables referencing ServiceTag
  orgServices OrgServiceTag[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([name, categoryId])
}

/// Phone number descriptors
model PhoneType {
  id       String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  type     String     @unique
  orgPhone OrgPhone[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Social media service properties
model SocialMediaService {
  id       String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  name     String   @unique
  urlBase  String[]
  logoIcon String
  internal Boolean  @default(false)

  orgSocialMedia  OrgSocialMedia[]
  socialMediaLink SocialMediaLink[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Source of organization/user
///  *INTERNAL* - for tracking purposes
model Source {
  id     String     @id @default(cuid()) /// @zod.custom(imports.cuid)
  source String     @unique
  type   SourceType

  organization Organization[]
  user         User[]         @relation("userSource")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

enum SourceType {
  EXTERNAL
  ORGANIZATION
  SYSTEM
  USER

  //@@schema("system")
}

/// Country metadata
model Country {
  id       String @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// ISO 3166-1 alpha-2 Country code
  cca2     String @unique @db.Char(2)
  /// ISO 3166-1 alpha-3 Country code
  cca3     String @unique @db.Char(3)
  /// Country name (English).
  name     String @unique(sort: Asc)
  /// International dialing code
  dialCode Int?   @db.SmallInt
  /// Country flag (emoji)
  flag     String
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON  Json? /// @zod.custom(imports.GeoJSONSchema)

  key   TranslationKey @relation("country", fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  demonym    TranslationKey? @relation("demonym", fields: [demonymKey, demonymNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  demonymKey String?
  demonymNs  String?

  // List of administrative subdivisions
  govDist GovDist[]

  /// Tables using Country
  attributeSupplement AttributeSupplement[]
  orgAddress          OrgLocation[]
  orgReviews          OrgReview[]
  orgPhone            OrgPhone[]
  serviceArea         ServiceAreaCountry[]

  surveys      UserSurvey[] @relation("origin")
  currentUsers User[]       @relation("currentCountry")
  userSurvey   UserSurvey[] @relation("currentLocation")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([demonymKey, demonymNs])
}

/// Administrative districts for countries
model GovDist {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Name (English/Roman alphabet)
  name    String
  /// Slug - [country (ISO)]-[govdist]-[...]
  slug    String  @unique
  /// ISO-3166-2 code
  iso     String?
  /// Abbreviation (Optional)
  abbrev  String?
  /// GeoJSON object - required only if this will be considered a "service area"
  geoJSON Json? /// @zod.custom(imports.GeoJSONSchema)

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String /// @zod.custom(imports.cuid)

  govDistType   GovDistType @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistTypeId String /// @zod.custom(imports.cuid)

  /// table can be used for "sub districts" (State -> County -> City)
  isPrimary    Boolean?  @default(true)
  parent       GovDist?  @relation(name: "associatedDistricts", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId     String? /// @zod.custom(imports.cuid)
  subDistricts GovDist[] @relation("associatedDistricts")

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  /// Tables using GovDist
  orgLocation OrgLocation[]
  orgReview   OrgReview[]
  user        User[]
  serviceArea ServiceAreaDist[]
  userSurvey  UserSurvey[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@index([countryId])
  @@index([parentId])
}

/// Descriptor of principal administrative districts (state, province, county, etc.)
model GovDistType {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  name String @unique

  govDist GovDist[]

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
}

/// Languages - ETF BCP 47 language tag
///  top level & regional locale (ex: 'en', "en-us", "en-ca")
model Language {
  id                 String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  languageName       String
  /// ETF BCP 47 language tag
  localeCode         String  @unique(sort: Asc)
  /// ISO 639-2
  iso6392            String? @db.Char(3)
  /// Language name in it's language.
  nativeName         String
  /// Is this language being actively used for translations?
  activelyTranslated Boolean @default(false)

  // fields using records
  AttributeSupplement AttributeSupplement[]
  OrgReview           OrgReview[]
  User                User[]
  OrgPhone            OrgPhoneLanguage[]
  OrgWebsite          OrgWebsiteLanguage[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

//
// Translation tables for database values.
//

// Top level category for i18next
model TranslationNamespace {
  name String @id

  keys TranslationKey[]

  attributeCategory AttributeCategory[]

  exportFile Boolean @default(true)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

// Item key - i18next
model TranslationKey {
  //id        String               @id @default(cuid()) /// @zod.custom(imports.cuid)
  /// Item key
  key       String
  /// Base string
  text      String
  /// Context
  context   String?
  /// Associated namespace
  namespace TranslationNamespace @relation(fields: [ns], references: [name], onDelete: Cascade, onUpdate: Cascade)
  ns        String

  // to manage plurals & ordinals
  parent    TranslationKey?  @relation("translationSubItems", fields: [parentKey, parentNs], references: [key, ns], onDelete: Cascade, onUpdate: Cascade)
  parentKey String? /// @zod.custom(imports.cuid)
  parentNs  String?
  children  TranslationKey[] @relation("translationSubItems")

  /// Associated tables
  attribute          Attribute?
  country            Country?            @relation("country")
  demonym            Country?            @relation("demonym")
  footerLink         FooterLink?
  freeText           FreeText?
  govDist            GovDist?
  govDistType        GovDistType?
  navigation         Navigation?
  phoneType          PhoneType?
  serviceCategory    ServiceCategory?
  serviceTag         ServiceTag?
  socialMediaService SocialMediaService?
  userCommunity      UserCommunity?
  userEthnicity      UserEthnicity?
  userImmigration    UserImmigration?
  userSOGIdentity    UserSOGIdentity?
  userTitle          UserTitle?
  userType           UserType?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  /// Only 1 key per namespace
  // @@unique([ns(sort: Asc), key(sort: Asc)])
  @@id([ns, key])
  @@unique([parentKey, parentNs])
}

model OutsideAPIService {
  service     String  @id
  description String
  urlPattern  String
  apiKey      String?

  instances OutsideAPI[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

/// Define outside APIs in use
model OutsideAPI {
  id String @id @default(cuid()) /// @zod.custom(imports.cuid)

  apiIdentifier String

  service     OutsideAPIService @relation(fields: [serviceName], references: [service], onDelete: Restrict, onUpdate: Cascade)
  serviceName String

  Organization Organization[]
  OrgLocation  OrgLocation[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

/// Visibilty settings for user profile pages
model FieldVisibility {
  id     String @id @default(cuid()) /// @zod.custom(imports.cuid)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String /// @zod.custom(imports.cuid)

  name           VisibilitySetting @default(NONE) /// All users
  email          VisibilitySetting @default(NONE) /// for service provider/professional
  image          VisibilitySetting @default(NONE) /// All users
  ethnicity      VisibilitySetting @default(NONE) /// for LCR accounts
  countryOrigin  VisibilitySetting @default(NONE) /// for LCR accounts
  SOG            VisibilitySetting @default(NONE) /// for LCR accounts
  communities    VisibilitySetting @default(NONE) /// for LCR accounts
  currentCity    VisibilitySetting @default(NONE) /// for LCR accounts
  currentGovDist VisibilitySetting @default(NONE) /// for LCR accounts
  currentCountry VisibilitySetting @default(NONE) /// for LCR accounts
  userType       VisibilitySetting @default(NONE) /// for specialized accounts
  associatedOrg  VisibilitySetting @default(NONE) /// for service provider
  orgTitle       VisibilitySetting @default(NONE) /// for service provider
  createdAt      VisibilitySetting @default(NONE) /// to facilitate "User since..."

  recordCreatedAt DateTime @default(now())
  recordupdatedAt DateTime @updatedAt

  auditLog AuditLog[]

  //@@schema("system")
}

enum VisibilitySetting {
  NONE
  LOGGED_IN
  PROVIDER
  PUBLIC

  //@@schema("system")
}

/// Define the App navigation tree
///  this will be used to generate a json file at build time
model Navigation {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  display  String
  href     String?
  isParent Boolean @default(true)
  icon     String?

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  parentItem Navigation?  @relation(name: "navHeirarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId   String? /// @zod.custom(imports.cuid)
  children   Navigation[] @relation("navHeirarchy")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([display, href])
}

model FooterLink {
  id      String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  display String
  href    String
  icon    String?

  key   TranslationKey @relation(fields: [tsKey, tsNs], references: [key, ns], onDelete: Restrict, onUpdate: Cascade)
  tsKey String
  tsNs  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]
  //@@schema("system")

  @@unique([tsKey, tsNs])
  @@unique([display, href])
}

model SocialMediaLink {
  id   String @id @default(cuid()) /// @zod.custom(imports.cuid)
  href String @unique
  icon String

  service   SocialMediaService @relation(fields: [serviceId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  serviceId String /// @zod.custom(imports.cuid)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  auditLog     AuditLog[]
  internalNote InternalNote[]

  //@@schema("system")
}

/// Internal notes - multipurpose
model InternalNote {
  id       String  @id @default(cuid()) /// @zod.custom(imports.cuid)
  legacyId String? @unique /// old ID from MongoDB
  text     String

  attribute                Attribute?            @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId              String? /// @zod.custom(imports.cuid)
  attributeCategory        AttributeCategory?    @relation(fields: [attributeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeCategoryId      String? /// @zod.custom(imports.cuid)
  // attributeRecord          AttributeRecord?      @relation(fields: [attributeRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // attributeRecordId        String? /// @zod.custom(imports.cuid)
  attributeSupplement      AttributeSupplement?  @relation(fields: [attributeSupplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeSupplementId    String? /// @zod.custom(imports.cuid)
  country                  Country?              @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId                String? /// @zod.custom(imports.cuid)
  footerLink               FooterLink?           @relation(fields: [footerLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  footerLinkId             String? /// @zod.custom(imports.cuid)
  govDist                  GovDist?              @relation(fields: [govDistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistId                String? /// @zod.custom(imports.cuid)
  govDistType              GovDistType?          @relation(fields: [govDistTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistTypeId            String? /// @zod.custom(imports.cuid)
  language                 Language?             @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId               String? /// @zod.custom(imports.cuid)
  navigation               Navigation?           @relation(fields: [navigationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  navigationId             String? /// @zod.custom(imports.cuid)
  organization             Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId           String? /// @zod.custom(imports.cuid)
  orgEmail                 OrgEmail?             @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId               String? /// @zod.custom(imports.cuid)
  orgHours                 OrgHours?             @relation(fields: [orgHoursId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgHoursId               String? /// @zod.custom(imports.cuid)
  orgLocation              OrgLocation?          @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId            String? /// @zod.custom(imports.cuid)
  orgPhone                 OrgPhone?             @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId               String? /// @zod.custom(imports.cuid)
  orgPhoto                 OrgPhoto?             @relation(fields: [orgPhotoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhotoId               String? /// @zod.custom(imports.cuid)
  orgReview                OrgReview?            @relation(fields: [orgReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgReviewId              String? /// @zod.custom(imports.cuid)
  orgService               OrgService?           @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId             String? /// @zod.custom(imports.cuid)
  orgSocialMedia           OrgSocialMedia?       @relation(fields: [orgSocialMediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgSocialMediaId         String? /// @zod.custom(imports.cuid)
  orgWebsite               OrgWebsite?           @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgWebsiteId             String?
  outsideApi               OutsideAPI?           @relation(fields: [outsideApiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  outsideApiId             String? /// @zod.custom(imports.cuid)
  outsideAPIService        OutsideAPIService?    @relation(fields: [outsideAPIServiceService], references: [service], onDelete: Cascade, onUpdate: Cascade)
  outsideAPIServiceService String?
  permission               Permission?           @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId             String?
  phoneType                PhoneType?            @relation(fields: [phoneTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneTypeId              String? /// @zod.custom(imports.cuid)
  serviceAccess            ServiceAccess?        @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAccessId          String? /// @zod.custom(imports.cuid)
  // serviceArea              ServiceArea?          @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // serviceAreaId            String? /// @zod.custom(imports.cuid)
  serviceCategory          ServiceCategory?      @relation(fields: [serviceCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceCategoryId        String? /// @zod.custom(imports.cuid)
  serviceTag               ServiceTag?           @relation(fields: [serviceTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceTagId             String? /// @zod.custom(imports.cuid)
  socialMediaLink          SocialMediaLink?      @relation(fields: [socialMediaLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialMediaLinkId        String? /// @zod.custom(imports.cuid)
  socialMediaService       SocialMediaService?   @relation(fields: [socialMediaServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialMediaServiceId     String? /// @zod.custom(imports.cuid)
  source                   Source?               @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId                 String? /// @zod.custom(imports.cuid)
  translation              TranslationKey?       @relation(fields: [translationKey, translationNs], references: [key, ns], onDelete: Cascade, onUpdate: Cascade)
  translationKey           String?
  translationNs            String?
  translationNamespace     TranslationNamespace? @relation(fields: [translationNamespaceName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  translationNamespaceName String? /// @zod.custom(imports.cuid)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLog AuditLog[]

  //@@schema("system")
}

/// Store changes made by users
model AuditLog {
  id        String   @id @default(cuid()) /// @zod.custom(imports.cuid)
  actor     User     @relation("Recorded User", fields: [actorId], references: [id])
  actorId   String /// @zod.custom(imports.cuid)
  timestamp DateTime @default(now())
  from      Json
  to        Json

  Account                              Account?                @relation(fields: [accountId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  accountId                            String? /// @zod.custom(imports.cuid)
  Attribute                            Attribute?              @relation(fields: [attributeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeId                          String? /// @zod.custom(imports.cuid)
  AttributeCategory                    AttributeCategory?      @relation(fields: [attributeCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeCategoryId                  String? /// @zod.custom(imports.cuid)
  // AttributeRecord          AttributeRecord?      @relation(fields: [attributeRecordId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  // attributeRecordId        String? /// @zod.custom(imports.cuid)
  AttributeSupplement                  AttributeSupplement?    @relation(fields: [attributeSupplementId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  attributeSupplementId                String? /// @zod.custom(imports.cuid)
  Country                              Country?                @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryId                            String? /// @zod.custom(imports.cuid)
  FieldVisibility                      FieldVisibility?        @relation(fields: [fieldVisibilityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fieldVisibilityId                    String? /// @zod.custom(imports.cuid)
  FooterLink                           FooterLink?             @relation(fields: [footerLinkId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  footerLinkId                         String? /// @zod.custom(imports.cuid)
  FreeText                             FreeText?               @relation(fields: [freeTextId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  freeTextId                           String? /// @zod.custom(imports.cuid)
  GovDist                              GovDist?                @relation(fields: [govDistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  govDistId                            String? /// @zod.custom(imports.cuid)
  GovDistType                          GovDistType?            @relation(fields: [govDistTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  govDistTypeId                        String? /// @zod.custom(imports.cuid)
  InternalNote                         InternalNote?           @relation(fields: [internalNoteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  internalNoteId                       String? /// @zod.custom(imports.cuid)
  Language                             Language?               @relation(fields: [languageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  languageId                           String? /// @zod.custom(imports.cuid)
  LocationPermission                   LocationPermission?     @relation(fields: [locationPermissionUserId, locationPermissionPermissionId, locationPermissionOrgLocationId], references: [userId, permissionId, orgLocationId], onDelete: SetNull, onUpdate: Cascade)
  locationPermissionUserId             String? /// @zod.custom(imports.cuid)
  locationPermissionPermissionId       String? /// @zod.custom(imports.cuid)
  locationPermissionOrgLocationId      String? /// @zod.custom(imports.cuid)
  Navigation                           Navigation?             @relation(fields: [navigationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  navigationId                         String? /// @zod.custom(imports.cuid)
  Organization                         Organization?           @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  organizationId                       String? /// @zod.custom(imports.cuid)
  OrganizationPermission               OrganizationPermission? @relation(fields: [organizationPermissionUserId, organizationPermissionPermissionId, organizationPermissionOrganizationId], references: [userId, permissionId, organizationId], onDelete: SetNull, onUpdate: Cascade)
  organizationPermissionUserId         String? /// @zod.custom(imports.cuid)
  organizationPermissionPermissionId   String? /// @zod.custom(imports.cuid)
  organizationPermissionOrganizationId String? /// @zod.custom(imports.cuid)
  OrgEmail                             OrgEmail?               @relation(fields: [orgEmailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgEmailId                           String? /// @zod.custom(imports.cuid)
  OrgHours                             OrgHours?               @relation(fields: [orgHoursId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgHoursId                           String? /// @zod.custom(imports.cuid)
  OrgLocation                          OrgLocation?            @relation(fields: [orgLocationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgLocationId                        String? /// @zod.custom(imports.cuid)
  OrgPhone                             OrgPhone?               @relation(fields: [orgPhoneId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgPhoneId                           String? /// @zod.custom(imports.cuid)
  OrgPhoto                             OrgPhoto?               @relation(fields: [orgPhotoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgPhotoId                           String? /// @zod.custom(imports.cuid)
  OrgReview                            OrgReview?              @relation(fields: [orgReviewId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgReviewId                          String? /// @zod.custom(imports.cuid)
  OrgService                           OrgService?             @relation(fields: [orgServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgServiceId                         String? /// @zod.custom(imports.cuid)
  OrgSocialMedia                       OrgSocialMedia?         @relation(fields: [orgSocialMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgSocialMediaId                     String? /// @zod.custom(imports.cuid)
  OrgWebsite                           OrgWebsite?             @relation(fields: [orgWebsiteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgWebsiteId                         String? /// @zod.custom(imports.cuid)
  OutsideAPI                           OutsideAPI?             @relation(fields: [outsideAPIId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  outsideAPIId                         String? /// @zod.custom(imports.cuid)
  OutsideAPIService                    OutsideAPIService?      @relation(fields: [outsideAPIServiceService], references: [service], onDelete: SetNull, onUpdate: Cascade)
  outsideAPIServiceService             String?
  // PermissionAsset          PermissionAsset?      @relation(fields: [permissionAssetId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  // permissionAssetId        String? /// @zod.custom(imports.cuid)
  Permission                           Permission?             @relation(fields: [permissionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  permissionId                         String? /// @zod.custom(imports.cuid)
  PhoneType                            PhoneType?              @relation(fields: [phoneTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  phoneTypeId                          String? /// @zod.custom(imports.cuid)
  ServiceAccess                        ServiceAccess?          @relation(fields: [serviceAccessId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceAccessId                      String?
  ServiceArea                          ServiceArea?            @relation(fields: [serviceAreaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceAreaId                        String? /// @zod.custom(imports.cuid)
  ServiceCategory                      ServiceCategory?        @relation(fields: [serviceCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceCategoryId                    String? /// @zod.custom(imports.cuid)
  ServiceTag                           ServiceTag?             @relation(fields: [serviceTagId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceTagId                         String? /// @zod.custom(imports.cuid)
  SocialMediaLink                      SocialMediaLink?        @relation(fields: [socialMediaLinkId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  socialMediaLinkId                    String? /// @zod.custom(imports.cuid)
  SocialMediaService                   SocialMediaService?     @relation(fields: [socialMediaServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  socialMediaServiceId                 String? /// @zod.custom(imports.cuid)
  Source                               Source?                 @relation(fields: [sourceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sourceId                             String? /// @zod.custom(imports.cuid)
  Translation                          TranslationKey?         @relation(fields: [translationKey, translationNs], references: [key, ns], onDelete: SetNull, onUpdate: Cascade)
  translationKey                       String?
  translationNs                        String?
  TranslationNamespace                 TranslationNamespace?   @relation(fields: [translationNamespaceName], references: [name], onDelete: SetNull, onUpdate: Cascade)
  translationNamespaceName             String? /// @zod.custom(imports.cuid)
  User                                 User[]                  @relation("AuditLogEntry") //@relation("AuditLogEntry", fields: [userId], references: [id],onDelete: SetNull,onUpdate: Cascade)
  userId                               String? /// @zod.custom(imports.cuid)
  UserCommunity                        UserCommunity?          @relation(fields: [userCommunityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userCommunityId                      String? /// @zod.custom(imports.cuid)
  UserEthnicity                        UserEthnicity?          @relation(fields: [userEthnicityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userEthnicityId                      String? /// @zod.custom(imports.cuid)
  UserImmigration                      UserImmigration?        @relation(fields: [userImmigrationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userImmigrationId                    String? /// @zod.custom(imports.cuid)
  UserMail                             UserMail?               @relation(fields: [userMailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userMailId                           String? /// @zod.custom(imports.cuid)
  UserRole                             UserRole?               @relation(fields: [userRoleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userRoleId                           String? /// @zod.custom(imports.cuid)
  UserSavedList                        UserSavedList?          @relation(fields: [userSavedListId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userSavedListId                      String? /// @zod.custom(imports.cuid)
  UserSOGIdentity                      UserSOGIdentity?        @relation(fields: [userSOGIdentityId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userSOGIdentityId                    String? /// @zod.custom(imports.cuid)
  UserTitle                            UserTitle?              @relation(fields: [userTitleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userTitleId                          String? /// @zod.custom(imports.cuid)
  UserType                             UserType?               @relation(fields: [userTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userTypeId                           String? /// @zod.custom(imports.cuid)

  //@@schema("system")
}

//
// RELATION TABLES
//

// Permissions

/// Assign permissions to user
model UserPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String /// @zod.custom(imports.cuid)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, permissionId])
}

/// Assign default permissions to role
model RolePermission {
  role         UserRole   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String /// @zod.custom(imports.cuid)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([roleId, permissionId])
}

/// For certain permissions, attach Organization
model OrganizationPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String /// @zod.custom(imports.cuid)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String /// @zod.custom(imports.cuid)

  authorized Boolean @default(false)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]
  //@@schema("relation")

  @@id([userId, permissionId, organizationId])
}

/// For certain permissions, attach Organization
model LocationPermission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String /// @zod.custom(imports.cuid)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String /// @zod.custom(imports.cuid)

  authorized Boolean @default(false)

  orgLocation   OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String /// @zod.custom(imports.cuid)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLog  AuditLog[]
  //@@schema("relation")

  @@id([userId, permissionId, orgLocationId])
}

//
// User links
//

/// For LCR accounts - link community to user profile
model UserCommunityLink {
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String /// @zod.custom(imports.cuid)
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, communityId])
}

/// For LCR accounts, link SOG identity to user profile
model UserSOGLink {
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String /// @zod.custom(imports.cuid)
  sogIdentity   UserSOGIdentity @relation(fields: [sogIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sogIdentityId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, sogIdentityId])
}

/// Link a user's shared list with other users who can view.
model ListSharedWith {
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String /// @zod.custom(imports.cuid)
  list   UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, listId])
}

/// Organizations saved to list
model SavedOrganization {
  list           UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId         String /// @zod.custom(imports.cuid)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([listId, organizationId])
}

/// Services saved to list
model SavedService {
  list      UserSavedList @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listId    String /// @zod.custom(imports.cuid)
  service   OrgService    @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([listId, serviceId])
}

/// Role assigned to user
model AssignedRole {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String /// @zod.custom(imports.cuid)
  role   UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([userId, roleId])
}

/// Link community to anon user survey
model SurveyCommunity {
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId    String /// @zod.custom(imports.cuid)
  community   UserCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String /// @zod.custom(imports.cuid)
  //@@schema("relation")

  @@id([surveyId, communityId])
}

/// Link ethnicity to anon user survey
model SurveyEthnicity {
  survey      UserSurvey    @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId    String /// @zod.custom(imports.cuid)
  ethnicity   UserEthnicity @relation(fields: [ethnicityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ethnicityId String /// @zod.custom(imports.cuid)
  //@@schema("relation")

  @@id([surveyId, ethnicityId])
}

/// Link SOG identity to anon user survey
model SurveySOG {
  survey   UserSurvey      @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId String /// @zod.custom(imports.cuid)
  sog      UserSOGIdentity @relation(fields: [sogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sogId    String /// @zod.custom(imports.cuid)
  //@@schema("relation")

  @@id([surveyId, sogId])
}

//
// Organization
//

/// Link multiple languages to a website entry
model OrgWebsiteLanguage {
  orgWebsite   OrgWebsite @relation(fields: [orgWebsiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgWebsiteId String /// @zod.custom(imports.cuid)
  language     Language   @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId   String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgWebsiteId, languageId])
}

/// Link multiple languages to a phone number
model OrgPhoneLanguage {
  orgPhone   OrgPhone @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId String /// @zod.custom(imports.cuid)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgPhoneId, languageId])
}

/// Link phone numbers to services
model OrgPhoneService {
  orgPhone   OrgPhone   @relation(fields: [orgPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgPhoneId String /// @zod.custom(imports.cuid)
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId  String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgPhoneId, serviceId])
}

/// Link emails to services
model OrgEmailService {
  orgEmail   OrgEmail   @relation(fields: [orgEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgEmailId String /// @zod.custom(imports.cuid)
  service    OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId  String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgEmailId, serviceId])
}

/// Link services to organizations
model OrgLocationService {
  orgLocation   OrgLocation @relation(fields: [orgLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgLocationId String /// @zod.custom(imports.cuid)
  service       OrgService  @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId     String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgLocationId, serviceId])
}

/// Link tags to services
model OrgServiceTag {
  service   OrgService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String /// @zod.custom(imports.cuid)
  tag       ServiceTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceId, tagId])
}

/// Link countries to service areas
model ServiceAreaCountry {
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAreaId String /// @zod.custom(imports.cuid)
  country       Country     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId     String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAreaId, countryId])
}

/// Link Governing Districts to service areas
model ServiceAreaDist {
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAreaId String /// @zod.custom(imports.cuid)
  govDist       GovDist     @relation(fields: [govDistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  govDistId     String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAreaId, govDistId])
}

//
// Attributes
//

/// Link attributes to organizations
model OrganizationAttribute {
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)
  attribute      Attribute    @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId    String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([organizationId, attributeId])
}

/// Link attributes to locations
model LocationAttribute {
  orgLocation OrgLocation @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId  String /// @zod.custom(imports.cuid)
  attribute   Attribute   @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([locationId, attributeId])
}

/// Link attributes to services
model ServiceAttribute {
  orgService   OrgService @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId String /// @zod.custom(imports.cuid)
  attribute    Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([orgServiceId, attributeId])
}

/// Link attributes to Service Access instructions
model ServiceAccessAttribute {
  serviceAccess   ServiceAccess @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAccessId String /// @zod.custom(imports.cuid)
  attribute       Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId     String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([serviceAccessId, attributeId])
}

/// Link attributes to category
model AttributeToCategory {
  attribute   Attribute         @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String /// @zod.custom(imports.cuid)
  category    AttributeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, categoryId])
}

/// Link attribute supplements to organization
model OrganizationAttributeSupplement {
  attribute    Attribute           @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String /// @zod.custom(imports.cuid)
  supplement   AttributeSupplement @relation(fields: [supplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplementId String /// @zod.custom(imports.cuid)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, supplementId, organizationId])
}

/// Link attribute supplements to location
model LocationAttributeSupplement {
  attribute    Attribute           @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String /// @zod.custom(imports.cuid)
  supplement   AttributeSupplement @relation(fields: [supplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplementId String /// @zod.custom(imports.cuid)

  orgLocation OrgLocation @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId  String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, supplementId, locationId])
}

/// Link attribute supplements to service
model ServiceAttributeSupplement {
  attribute    Attribute           @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String /// @zod.custom(imports.cuid)
  supplement   AttributeSupplement @relation(fields: [supplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplementId String /// @zod.custom(imports.cuid)

  orgService   OrgService @relation(fields: [orgServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgServiceId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, supplementId, orgServiceId])
}

/// Link attribute supplements to service access instructions
model ServiceAccessAttributeSupplement {
  attribute    Attribute           @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId  String /// @zod.custom(imports.cuid)
  supplement   AttributeSupplement @relation(fields: [supplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplementId String /// @zod.custom(imports.cuid)

  serviceAccess   ServiceAccess @relation(fields: [serviceAccessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceAccessId String /// @zod.custom(imports.cuid)

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, supplementId, serviceAccessId])
}

/// Link default attributes to service category
model ServiceCategoryDefaultAttribute {
  attribute   Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String /// @zod.custom(imports.cuid)
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, categoryId])
}

/// Link default attributes to service tag
model ServiceTagDefaultAttribute {
  attribute   Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String /// @zod.custom(imports.cuid)
  service     ServiceTag @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId   String

  linkedAt DateTime @default(now())
  //@@schema("relation")

  @@id([attributeId, serviceId])
}
